#input data read
import pandas as pd

data = pd.read_csv("/SampleData_AP_Refunds_Financial_EventLog .csv")
#data.head()

#token and preproccessing
remove_ac = data.drop_duplicates(subset='ActivityName')#remove repeated activities
ac_li = remove_ac['ActivityName'].tolist()#put all activities into a list
len_ac = len(ac_li)

tokens = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o']
len_tk = len(tokens)

if len_tk < len_ac:
  print("More tokens need to be added!")

#counting how many caseIDs we're dealing with
remove_cid = data.drop_duplicates(subset='CaseId')#remove repeated CaseIds
cid_removed = remove_cid['CaseId'].tolist()#put all CaseIds into a list
len_cidr = len(cid_removed)

cid_li = data['CaseId'].tolist()#put all CaseIds into a list
len_cid = len(cid_li)

act_li = data['ActivityName'].tolist()
len_act = len(act_li)

#count number of activities in each case
v1=0
v2=0
case_num = []
count = 0
for v3 in range(0,len_cid):
  if cid_li[v3] == cid_removed[v1]: #checking if an activity belongs in the same caseID
    count = count +1
  else:
    case_num.append(count) #number of activities in each caseID goes in case_num[f]
    v2 = v2+1  #position of array in a caseID
    count=1 #reset the count variable
    v1 = v1+1 #goint to the next caseID
case_num.append(count)

#change Activities to alphabets(checks the whole sample and changes 1, then comes back for the 2nd activity, and so on...)
v4 = 0
for v5 in range(0,len_ac): #number of distinct activitie
  for v6 in range(0,len_act): #total number of activities
    if ac_li[v5] == act_li[v6]: #for each activity that has the same name
      act_li[v6] = tokens[v4] #a token will be assigned
    else:
      act_li[v6] = act_li[v6]
  v4 = v4 + 1

#seperate activities of each caseID and put it in a nested list 'CaseId'
v=0
w=0
Q=0
case_list = []
CaseId = [] #same as L

for z in range(0,len_cid):
  if cid_li[z] == cid_removed[v]:

    case_list.append(act_li[w])
    #print(act_li[w])
    w = w+1

  else:
    if Q!=0:
      case_list.append(act_li[w])
      w = w+1

    CaseId.append(case_list)
    Q = Q+1
    if Q <= len_cid:
      case_list = []
    v = v + 1
case_list.append(act_li[w])
CaseId.append(case_list)

#STEP 1
#should contain unique activities
df_act = pd.DataFrame(act_li, columns = ['Activity'])
remove_act = df_act.drop_duplicates(subset='Activity')#remove repeated activities
TL = remove_act['Activity'].tolist()#put all activities into a list
TL = set(TL)
print("TL =", TL) #prints the individual activities which is our first step of the algorithm

#STEP 2 & 3
#get first and last nodes
s=0
startp = []
finishp = []

for m in range(0,len_cidr):
    a = case_num[s] - 1
    startp.append(CaseId[m][0])
    finishp.append(CaseId[m][a])
    s = s + 1
S_point = set(startp)
F_point = set(finishp)
#prints the inpt nodes and the output nodes
print("Ti = " , S_point)
print("To = ", F_point)

#STEP 4-1
#get the straigh relations
x_list =[]
#checks contents of CaseId one by one and puts each activity sequentially
for L in range(0, len_cidr):
    for L2 in range(0, case_num[L]):
        if L2+1 < case_num[L] - 1: #so we don't get an out of bound error
            X_set = set(CaseId[L][L2])
            X_set2 = set(CaseId[L][L2+1])
            my_tuple = (X_set, X_set2)  # convert sets to tuples
            x_list.append(my_tuple)
#for taking last activity(e) into consideration
        else:
            last = (case_num[L]) - 1
            X_set = set(CaseId[L][last-1])
            X_set2 = set(CaseId[L][last])
            my_tuple = (X_set, X_set2)  # convert sets to tuples
            x_list.append(my_tuple)
#only need the uniquely created tuples
unique_tuples = []
for t in x_list: #removes repeated tuples
    if t not in unique_tuples:
        unique_tuples.append(t)
unique_list = list(unique_tuples)  # convert the set of unique tuples to a list

#STEP 4-2
#remove the parallel relations
paral = []
X_len = len(unique_list)
for c in range(0,X_len):
    for c2 in range(0,X_len):
      if unique_list[c] == unique_list[c2][::-1]: #checks if there are tuple that have a reversed pararel: ({a},{b}) && ({b},{a})
        paral.append(unique_list[c][c+1])
        paral.append(unique_list[c2][::-1])  #appends these tuples in a list...

unique_list = [x for x in unique_list if x not in paral] #... then removes them from the actual lisl X (unique_list)

#STEP 4-3
#check for double second elements
X_len = len(unique_list)
snd_list = []
snd2_list = []
#unique_tuples = OrderedDict()
for u in range(0,X_len):
    for u2 in range(0,X_len):
        if unique_list[u][0] == unique_list[u2][0]: # if the there are tuples with the same first element...
            new_set = set(unique_list[u][1]).union(set(unique_list[u2][1]))
            tuple_update = (unique_list[u][0], new_set) #...then takes the 2 second elements, puts them in a single set then turns the first element and set of 2 second elements in a tuple
            snd_list.append(tuple_update) #the new tuples are assigned to an empty list

#check double first elements
        elif unique_list[u][1] == unique_list[u2][1]: # if the there are tuples with the same second element...
            new_set2 = set(unique_list[u][0]).union(set(unique_list[u2][0]))
            tuple_update2 = (new_set2, unique_list[u][1]) #...then takes the 2 first elements, puts them in a single set then turns the second element and set of 2 first elements in a tuple
            snd2_list.append(tuple_update2) #the new tuples are assigned to an empty list

#the code above creates duplicates, thus duplicated need to be removed and new tuples will be kept
for element in snd_list:
    if element not in unique_list:
        unique_list.append(element)
for element2 in snd2_list:
    if element2 not in unique_list:
        unique_list.append(element2)
print("X = ", unique_list)#prints the final version of the relations between activities

#STEP 5
#remove tuples which have a supertuple
uni_rmv = [content for content in unique_list] #create a copy
removed_list = []
X_len = len(uni_rmv)

for u in range(0,X_len):
    for u2 in range(u+1,X_len):
        if unique_list[u][0] == unique_list[u2][0]: #checks if there are tuples with same first element
          removed_list.append(unique_list[u]) #then puts the whole tuple of those found with same first element in a list for removal
          break
        elif unique_list[u][1] == unique_list[u2][1]: #checks if there are tuples with same second element
          removed_list.append(unique_list[u]) #then puts the whole tuple of those found with same second element in a list for removal
          break
#print(removed_list)

for removed in removed_list: #the removable tuples are removed from X (unique_list)
    uni_rmv.remove(removed)

print("Y = ", uni_rmv)#prints the list of activities without the subset activities

#the rest of the steps are for visualizing!

